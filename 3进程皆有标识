{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <div style=\"text-align: right\">   第3章 </div>\n",
    "\n",
    "##  <div style=\"text-align: right\"> 进程皆有标识 </div>\n",
    "\n",
    "___"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "在系统中运行的所有进程都有一个唯一的进程标识符，称为pid。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pid并不传达关于进程本身的任何信息，它仅仅是一个顺序数字标识。你的进程在内核眼中只是一个数字而已。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "以下是在python程序中查看当前pid的方法。启动python并输入："
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 本书后续的讲解主要依靠[psutil](https://psutil.readthedocs.io/en/latest/)库实现，检查你的电脑是否安装有该库，若还未安装，可使用`pip install psutil`命令进行安装。\n",
    "此外，为便于文档集成，书中的代码均在jupyter-notebook环境中执行。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24186"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import psutil\n",
    "p = psutil.Process()\n",
    "p.pid"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> psutil中使用Process类表示一个进程，实例化一个进程时，若pid参数为None（默认值为None)，则返回当前进程。pid属性保存了进程的pid值。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "pid是对进程的一种简单通用的描述。因为它与进程内容无关，所以能够被所有的编程语言理解并通过简单的工具来获知。接下来我们会看到如何使用不同的工具借助pid跟踪进程细节。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1 交叉参考"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "为一览全貌，我们可以使用ps(1)将pid与内核所看到的情形进行对照。保持jupyter-notebook会话\n",
    "的同时在终端执行下面的命令：\n",
    "\n",
    "```shell\n",
    " $ ps -p <pid-of-process>\n",
    "```\n",
    "\n",
    "该命令应该会显示出一个名为ZMQbg/1的进程，其pid与jupter-notebook会话中所显示的一模一样。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![current_pid](figure/current_pid.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2 实践领域"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "仅仅知道pid并没有什么用处，那应该用在何处呢？\n",
    "\n",
    "在实际操作中，我们常常会在日志文件中发现pid。当有多个进程向一个文件写入日志的时候，知道哪一行日志是由哪一个进程写入的至关重要。在每一行中加入pid就能解决这个问题。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "加入pid还可以让你通过类似 _top_ 或是 _lsof(1)_ 的命令，与操作系统之间进行信息的交叉参考。下面列出的就是一些来自Syglass服务器启动时的输出信息，每行一个中括号内注明了该日志的pid来源。"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```shell\n",
    "[58550] [Spyglass::Server] Listening on port 4545\n",
    "[58550] [Spyglass::Lookout] Received incoming connection\n",
    "[58557] [Spyglass::Master] Loaded the app\n",
    "[58557] [Spyglass::Master] Spawned 4 workers, Badysitting now...\n",
    "[58558] [Spyglass::Worker] Received connection\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3 系统调用"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "python中获取进程的pid属性对应于 _getpid(2)_ 。"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
